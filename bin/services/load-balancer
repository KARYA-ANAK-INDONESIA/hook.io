#!/usr/bin/env node
var lb = require('../../lib/load-balancer/load-balancer');
var cluster = require('cluster');
var config = require('../../config');
// config.env = "prod";
if (config.env === 'dev') {
  console.log('using dev mode, no cluster')
  lb.start({}, function(err, app){
    if (err) {
      throw err;
    }
    console.log('lb started', app.server.address())
  });
} else {

  // the master node is responsible for performing clustering logic
  if (cluster.isMaster) {

    // create a new worker for every available CPU
    var numWorkers = require('os').cpus().length;

    console.log('Master cluster setting up ' + numWorkers + ' workers...');

    for(var i = 0; i < numWorkers; i++) {
        cluster.fork();
    }

    cluster.on('exit', function (worker, code, signal) {
        console.log('Worker ' + worker.process.pid + ' died with code: ' + code + ', and signal: ' + signal);
        console.log('Starting a new worker');
        // If the worker exited after disconnect, don't do anything. It should have already forked.
        if (worker.exitedAfterDisconnect === true) {
          console.log('exited after disconnect. probably performing rolling update');
        } else {
        // Else if the worker did not have disconnect event, assume it was a crash and fork() immediately 
          console.log('got exit event without disconnect, probably a process crash')
        }
        cluster.fork();
    });

    cluster.on('online', function(worker) {
      console.log('Worker ' + worker.process.pid + ' is online');
      worker.on("disconnect", function () {
         var id = worker.id;
         console.log("node got disconnect event", id);
         // once disconnected, this node is no longer accepting incoming traffic from the cluster
         // so immediately kill the worker node
         worker.kill();
      });

      // message handler is used for worker to receieve messages from parent process
      worker.on('message', function (message) {
        if (message.event === "restart") {
          // disconnect one worker from the pool and wait
          var workers = Object.keys(cluster.workers);
          if (workers.length === 0) {
            console.log('fatal error: cluster has exhausted all nodes');
            return;
          }
          // performing rolling update here where we iterate through each stale node
          var workerId = workers[0];
          cluster.workers[workerId].disconnect();
        }
        if (message.event === 'query') {
          var queryResponse = {};
          for (var w in cluster.workers) {
            queryResponse[w] = {
              pid: cluster.workers[w].process.pid,
              spawnfile: cluster.workers[w].process.spawnfile
            }
            // TODO: add uptime() or ctime
          }
          worker.send({ event: 'queryResponse', data: queryResponse })
        }
      });
    });
    cluster.on('listening', function (worker) {
      console.log('Worker ' + worker.process.pid + ' is listening');
    });
  } else {
    lb.start({}, function(err, app){
      if (err) {
        throw err;
      }
      // process.send({ event: 'load-balancer::listening' });
      console.log('lb started', app.server.address());
    });
  }
}